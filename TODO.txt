TODO DOpE
=========

Aufraeumen fuer ersten *.tar.tgz
-------------------------------

content.tex	Thomas
doxygen		Winni

Speziell:
- TW: content.tex for PDE/Instat OPT/Stat and OPT/Instat



Speziell fuer Thomas (Nov 18, 2013)
-----------------------------------
In OPT/StatPDE/Example1 sollte z.B. analog zu PDE/StatPDE/Example1
	einmal das ganze Programm erklärt werden, da es sich ja doch
	etwas von den PDE Beispielen unterscheidet. Andere Klassen
	und mehr Implementation in Functional und PDE.

In OPT/StatPDE/Example2 Sollten wir kurz auf die Implementierung
	von 0-d Kontrollen mit FE-Nothing eingehen.
FE_Nothing componenten geben die Anzahl der Parameter an.


In OPT/StatPDE/Example4 sollte noch etwas Text zur Kontrolle in
	den Dirichlet-Werten stehen, da die ja nicht (explizit) in der 
	variationellen Form vorkommen.

In einem der Beispiele Example[678] sollten wir die Constraints
erklären. Ich glaube es ist am besten wenn wir dazu 7 nehmen und
dann die Beispiele 6 und 7 vertauschen.
ex 7) Speziell etwas zu Box-constraints.
ex 6+8) zusaetzlich mittelwert constraint - functional

Standard TODO fuer naechstes Treffen
------------------------------------
- content.tex for PDE/Instat OPT/Stat and OPT/Instat
- CDC and FDC should be local template arguments of the methods in 
  PDE and Functional.
- Beeing more clever, it should be possible to remove alle the UTT and QTT terms,
  they implement the same argument as U and Q, but with different variables.
- Finish MG-Solver (Experimental/Example12)
- InstatPDEProblem schreiben
- Multimesh aus IntegratorDataContainer entfernen
- DirichletDataInterface - GetParam und GetValue auslagern?
- define DoFHandler aendern in typedef, erst mit spaeterer gcc version moeglich, 
  siehe http://en.cppreference.com/w/cpp/language/type_alias und http://gcc.gnu.org/projects/cxx0x.html
- Fehlerschätzer mit Strong*Residual berücksichtigt nicht automatisch 
  das gewählte funktional.
- Moeglichkeit schaffen, relaxationsparameter etc. an lineare Loeser zu uebergeben.
- Moeglichkeit schaffen, Informationen der linearen Loeser ausgeben (z.B. Anzahl cg-Schritte)
- Nutzung von MUMPS als Direkter Löser.

- Oeffentlicher Download (erstmal Doku und funktionstuechtige Software)

- Funktionalauswertung in Opt-Problemen abhängig vom Typ machen: zur 
  Zeit werden die Ableitungen der Funktionale (sobald diese 
  in localfunctional.cc implementiert sind) IMMER ausgewertet.

- Matrix: Immer "State"
- Common Codeschnipsel in eigene Klasse auslagern
- Alle Functional Calls in opt-problem-container sollten vor dem 
  Aufruf prüfen ob die ,,Zeit (time)'' auch benötigt wird (NeedTime)
- Need to differentiate in functional between terms that are integrals in time 
  and those that are not! Needed for derivatives only.
- Einheitliche Handhabung ob etwas pointer oder Reference wird und Const correctness

- Check~cg!: SetType im Optproblem sollte auch dem Funktional den typ mitteilen.

- Standardinterface fuer Postprozesse? 
  -- Basisklasse fuer Postprozesse
  -- Liste von Postprozessbasisklassen in Reduced Problem.
  -- Aufruf von ausserhalb: do postprocess!!!11! 

-  Rueckgabeklassen fuer Loeser
-  Parallelisierung mit Trilinos, mpi und p4est

Future:
-------
- Adjungierte Zeitschrittverfahren 
  (Dann geht endlich auch Opt-Control im Instationaeren), sind noch
  fertigzustellen.
- Verschiedene Kontrolltypen im Instationaeren, insbesondere Kontrolle in den AWen
-- Verschiedene Typen der Kontrolle (undefined, initial, timedistributed, timedistributedtimedependend). Diese gibt man dem Kontrollvektor, der den Typ wiederum an STH liefert. 
   Dieser speichert ihn und stellt sicher, dass alle Kontrollen den selben Typen haben. 
- DOpE Einfuehrung (wir sind alle dafuer, Winni faengt an)
- FE_Values ? Kann man dim=0 anlegen? Dann kann der weg (Ja, habs auskommentiert,
  trotzdem laeufen alle Probleme korrekt durch (ausser OPT/7+8))~tw
	
- Fehlerschaetzer fuer OPT (quantity of interest - Kostenfunktional geht bereits)	
	
- Interpretation der primalen Zeitschrittverfahren als Galerkin-Verfahren.
	-- Klasse schreiben (short-statevector o.ae.), die im instationaeren Fall dem
	Newtonsolver lediglich die fuer das aktuelle Zeitintervall noetigen Freiheitsgrade
	uebergibt. Friend oder abgeleitet vom Statevector, im Konstruktor aktuelles Zeitintervall plus STH, generiert dann Liste von Zeitpunkten, auf denen er arbeitet.~tw
	-- Zeitintegrator ~cg

- (homogene!) Dirichletdaten ueber Constraintmatrix lokal.

- Erzeugen von Subproblemen fuer Primales, Duales, ... Problem, anstatt alles im Optproblem zu unterscheiden
optproblem, davon abgeleitet forwardproblem und backwardproblem (mit Matrix),
davon state und tangent bzw. dual und dual hessian ~ww
  
- Trennung der Ortsdiskretisierung (verschieden Feine Gitter) 
  --Integrals on faces/boundaries                                                                                  
                (Upgrades for integrator_multimesh and multimesh_facedatacontainer needed)                           
  --Support for nonstationary problems                                                                             
                (Upgrades for integrator_multimesh needed)                                                           

-  Loesen des Opt-Control Probleme ueber die KKT-Bedingungen 
  (im stationaeren, benötigt Matrizen für die gemischten Ableitungen, wollen wir dazu neue 
  Terme haben, oder wollen wir alle linearen Teile über Matrizen bauen?)
  -- Newtonsolver zu aendern (ueberpruefen, ob kostenfunktional kleiner wird)
  -- BlockMatrix fuer das KKT-System. -> Eigenen Integrator schreiben.



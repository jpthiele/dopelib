# Usually, you will not need to modify anything beyond this point...
GET_FILENAME_COMPONENT(DOpE "${CMAKE_SOURCE_DIR}/${DOpE}" ABSOLUTE)

SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-std=c++11")

INCLUDE_DIRECTORIES(
  ${DOpE}/DOpEsrc/basic
  ${DOpE}/DOpEsrc/container
  ${DOpE}/DOpEsrc/include
  ${DOpE}/DOpEsrc/interfaces
  ${DOpE}/DOpEsrc/opt_algorithms
  ${DOpE}/DOpEsrc/problemdata
  ${DOpE}/DOpEsrc/reducedproblems
  ${DOpE}/DOpEsrc/templates
  ${DOpE}/DOpEsrc/tsschemes
  ${DOpE}/DOpEsrc/wrapper
  )

ADD_CUSTOM_TARGET(debug
  COMMAND ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=Debug ${CMAKE_SOURCE_DIR}
  COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target all
  COMMENT "Switch CMAKE_BUILD_TYPE to Debug"
  )

ADD_CUSTOM_TARGET(release
  COMMAND ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=Release ${CMAKE_SOURCE_DIR}
  COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target all
  COMMENT "Switch CMAKE_BUILD_TYPE to Release"
  )

ADD_CUSTOM_TARGET(run COMMAND ${TARGET} 
  COMMENT "Run with ${CMAKE_BUILD_TYPE} configuration"
  )

LINK_DIRECTORIES(${DOpE}/DOpEsrc/lib/${dope_dimension}d/${deal_dimension}d/)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8)

FIND_PACKAGE(deal.II 8.0 QUIET
  HINTS ${DEAL_II_DIR} $ENV{HOME}/deal.II $ENV{DEAL_II_DIR}
  )
IF(NOT ${deal.II_FOUND})
  MESSAGE(FATAL_ERROR "\n"
    "*** Could not locate deal.II. ***\n\n"
    "You may want to either pass a flag -DDEAL_II_DIR=/path/to/deal.II to cmake\n"
    "or set an environment variable \"DEAL_II_DIR\" that contains this path."
    )
ENDIF()

STRING(TOLOWER "${CMAKE_BUILD_TYPE}" _cmake_build_type)
IF("${_cmake_build_type}" STREQUAL "debug")
  SET(_suffix ".g")
ENDIF()

SET(DOPE_LINK_LIBS dope${_suffix})

#Finding Thirdparty libraries
#IPOPT
SET(IPOPT_PATH ${DOpE}/ThirdPartyLibs/ipopt/)
IF(IS_DIRECTORY ${IPOPT_PATH})
	MESSAGE(STATUS "Thirdparty-Library IPOPT has been found at ${IPOPT_PATH}")
 	ADD_DEFINITIONS(-DWITH_IPOPT)
	INCLUDE_DIRECTORIES(${IPOPT_PATH}/include/coin/)
	SET(IPOPT_LIB_PATH ${IPOPT_PATH}/lib64/)
	LINK_DIRECTORIES(${IPOPT_LIB_PATH})
	SET(DOPE_LINK_LIBS ${DOPE_LINK_LIBS} ipopt)
	#Additional IPOPT libraries

	FOREACH(aux_lib coinasl coinmetis coinmumps coinlapack)
	       FIND_LIBRARY(AUX_LIBS $aux_lib ${DOPE_LIB_PATH})
	       	IF(NOT AUX_LIBS-NOTFOUND)    
	     	       MESSAGE(STATUS "IPOPT Thirdparty-Library ${aux_lib} found")
	     	       SET(DOPE_LINK_LIBS ${DOPE_LINK_LIBS} ${aux_lib})
		ELSE()		  	  
		       MESSAGE(STATUS "NO HSL Library found")
		ENDIF()
	ENDFOREACH()
	
ELSE()
	MESSAGE(STATUS "No IPOPT could be found.")
	SET(IPOPT_PATH "")			
ENDIF()	

#SNOPT
SET(SNOPT_PATH ${DOpE}/ThirdPartyLibs/snopt/)
IF(IS_DIRECTORY ${SNOPT_PATH})
	MESSAGE(STATUS "Thirdparty-Library SNOPT has been found at ${SNOPT_PATH}")
 	ADD_DEFINITIONS(-DWITH_SNOPT -fPIC)
	INCLUDE_DIRECTORIES(${SNOPT_PATH}/include/
	                    ${SNOPT_PATH}/cppsrc)
	SET(SNOPT_LIB_PATH ${SNOPT_PATH}/lib/)
	LINK_DIRECTORIES(${SNOPT_LIB_PATH})
	SET(DOPE_LINK_LIBS ${DOPE_LINK_LIBS} snopt_cpp snopt snprint gfortranbegin gfortran f2c)
ELSE()
	MESSAGE(STATUS "No SNOPT could be found.")
	SET(SNOPT_PATH "")			
ENDIF()	

DEAL_II_INITIALIZE_CACHED_VARIABLES()

ADD_EXECUTABLE(${TARGET} ${TARGET_SRC})

DEAL_II_SETUP_TARGET(${TARGET})
   
TARGET_LINK_LIBRARIES(${TARGET} ${DOPE_LINK_LIBS})

SET_PROPERTY(TARGET ${TARGET} APPEND PROPERTY
      COMPILE_DEFINITIONS "deal_II_dimension=${deal_dimension};dope_dimension=${dope_dimension};DEAL_II_MAJOR_VERSION=${DEAL_II_VERSION_MAJOR};DEAL_II_MINOR_VERSION=${DEAL_II_VERSION_MINOR}"
      )

SET_PROPERTY(TARGET ${TARGET} PROPERTY RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR})
